use std::{fs::create_dir_all, path::PathBuf};
use directories::ProjectDirs;
use rusqlite::{params, Connection};

use crate::music::Song;

/// Creates and then returns the path to a suitable location for application data to be stored.
/// If the path already exists, just return the path.
pub fn get_application_directory() -> Result<PathBuf, ()> {
    let project_dir = match ProjectDirs::from("com", "hchap1", "resonate") {
        Some(project_dir) => project_dir,
        None => return Err(())
    };

    let path = project_dir.data_dir().to_path_buf();
    let _ = create_dir_all(&path);
    Ok(path)
}

pub struct Database {
    connection: Connection,
    directory: PathBuf
}

impl Database {
    pub fn new(directory: PathBuf) -> Self {
        let connection: Connection = match Connection::open(format!("{}/data.db", directory.to_string_lossy().to_string())) {
            Ok(connection) => connection,
            Err(_) => panic!("Could not create or access database file!")
        };

        // Ensure tables exist
        let _ = connection.execute_batch("
            BEGIN;
            CREATE TABLE IF NOT EXISTS Songs (
                id TEXT PRIMARY KEY NOT NULL,
                name TEXT NOT NULL,
                artist TEXT NOT NULL,
                duration_s INT NOT NULL,
                downloaded INT NOT NULL
            );
            COMMIT;
        ");

        Self { connection, directory }
    }

    pub fn add_song_to_cache(&self, song: &Song) {
        let _ = self.connection.execute_batch(format!("
            BEGIN;
            INSERT INTO Songs
            VALUES('{}', '{}', '{}', {}, {});
        ", song.id, song.name, song.artist, song.duration, if song.file == None { 0 } else { 1 }
        ).as_str());
    }

    pub fn search_cached_song(&self, query: String) -> Vec<Song> {
        let mut pattern = self.connection.prepare("SELECT id FROM Songs WHERE name LIKE ? OR artist LIKE ?").unwrap();
        let song_iter = pattern.query_map(params![query, query], |row| {
            Ok(row.get::<_, String>(0))
        });
    }
}
